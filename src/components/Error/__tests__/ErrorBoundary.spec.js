import {
  render, waitFor, fireEvent, getByText,
} from 'test-utils/testUtils';
import ErrorBoundary from '../ErrorBoundary';

const ComponentWithError = (shouldThrow) => {
  if (shouldThrow) {
    throw new Error();
  }
};

describe('<ErrorBoundary>', () => {
  test('should match the snapshot', () => {
    const { container } = render(<ErrorBoundary>Text</ErrorBoundary>);
    expect(container).toMatchSnapshot();
  });

  test('displays error message on error generated by child', async () => {
    const { container } = render(<ErrorBoundary><ComponentWithError shouldThrow /></ErrorBoundary>);
    const errorMessage = await waitFor(() => getByText(container, 'An unexpected error occured.'));
    expect(errorMessage).toBeTruthy();
  });

  test('reload the page', async () => {
    // eslint-disable-next-line no-unused-vars
    const { location } = window;
    delete window.location;
    window.location = { reload: jest.fn() };

    const { getByTestId } = render(<ErrorBoundary><ComponentWithError shouldThrow /></ErrorBoundary>);

    const reloadPageBtn = await waitFor(() => getByTestId('reloadPage'));
    fireEvent.click(reloadPageBtn);
    expect(window.location.reload).toHaveBeenCalled();
  });
});
