/* eslint-disable object-curly-newline */
/* eslint-disable max-len */
const BlotterData = Object.create({

  DealGroup: 'Deal',
  ApprovalsGroup: 'Approvals',
  StpGroup: 'STP',
  BrokerageGroup: 'Brokerage',

  CheckFlag: { Header: 'Chk', ColId: 'isDealUnderInvestigation' },
  DealId: { Header: 'ID', ColId: 'dmsDealReference' },
  DealStatus: { Header: 'Status', ColId: 'dealStatus' },
  DealAction: { Header: 'Action', ColId: 'dealAction' },
  DealType: { Header: 'Type', ColId: 'dealType' },
  Strategy: { Header: 'Strategy', ColId: 'tradeStrategy' },
  ChainRef: { Header: 'Chain Reference', ColId: 'chainId' },
  TradeDate: { Header: 'Trade Date', ColId: 'tradeDate' },
  TradeTime: { Header: 'Trade Time', ColId: 'tradeTime' },
  ExecVen: { Header: 'Venue Type', ColId: 'executionVenueType' },
  ValueDate: { Header: 'Value Date', ColId: 'valueDate' },
  Amount: { Header: 'Amount', ColId: 'notionalAmount' },
  Price: { Header: 'Price', ColId: 'price' },
  BuyerCust: { Header: 'Buy Customer', ColId: 'payerCustomerName' },
  BuyerCustLong: { Header: 'Buy Customer Long Name', ColId: 'payerCustomerLongName' },
  BuyerTrader: { Header: 'Buy Trader', ColId: 'payerTraderName' },
  BuyerTraderLong: { Header: 'Buy Trader Long Name', ColId: 'payerTraderLongName' },
  BuyerBroker: { Header: 'Buy Broker', ColId: 'payerBrokerName' },
  BuyerBrokerLong: { Header: 'Buy Broker Long Name', ColId: 'payerBrokerLongName' },
  SellerCust: { Header: 'Sell Customer', ColId: 'receiverCustomerName' },
  SellerCustLong: { Header: 'Sell Customer Long Name', ColId: 'receiverCustomerLongName' },
  SellerTrader: { Header: 'Sell Trader', ColId: 'receiverTraderName' },
  SellerTraderLong: { Header: 'Sell Trader Long Name', ColId: 'receiverTraderLongName' },
  SellerBroker: { Header: 'Sell Broker', ColId: 'receiverBrokerName' },
  SellerBrokerLong: { Header: 'Sell Broker Long Name', ColId: 'receiverBrokerLongName' },
  BuyerApp: { Header: 'Buy', ColId: 'payerOverallApprovalStatus' },
  SellerApp: { Header: 'Sell', ColId: 'receiverOverallApprovalStatus' },
  BuyerBrokerApp: { Header: 'Buy Broker', ColId: 'payerBrokerApprovalState' },
  BuyerMidOffApp: { Header: 'Buy Mid-Office', ColId: 'payerMidOfficeApprovalState' },
  BuyerTraderApp: { Header: 'Buy Trader', ColId: 'payerTraderApprovalState' },
  SellerBrokerApp: { Header: 'Sell Broker', ColId: 'receiverBrokerApprovalState' },
  SellerMidOffApp: { Header: 'Sell Mid-Office', ColId: 'receiverMidOfficeApprovalState' },
  SellerTraderApp: { Header: 'Sell Trader', ColId: 'receiverTraderApprovalState' },
  BuyerSTP: { Header: 'Buy', ColId: 'payerSTPStatusGroup' },
  SellerSTP: { Header: 'Sell', ColId: 'receiverSTPStatusGroup' },
  BuyerBrokerage: { Header: 'Buy Amount', ColId: 'payerBrokerageAmount' },
  SellerBrokerage: { Header: 'Sell Amount', ColId: 'receiverBrokerageAmount' },
  BuyerBrokerageCCY: { Header: 'Buy CCY', ColId: 'payerBrokerageCurrency' },
  SellerBrokerageCCY: { Header: 'Sell CCY', ColId: 'receiverBrokerageCurrency' },

  // these are the STP statuses shown in the grid. Colour is found in classname and status found in title
  STP_BLACK: { Colour: 'black', Status_A: 'TMMSENDFAILURE' },
  STP_RED: { Colour: 'red', Status_A: 'CANCELLED', Status_B: 'REJECT', Status_C: 'REJECTED', Status_D: 'WITHDRAWN' },
  STP_YELLOW: { Colour: 'yellow', Status_A: 'DELIVERED', Status_B: 'PENDING', Status_C: 'PICKEDUP' },
  STP_GREEN: { Colour: 'green', Status_A: 'AFFIRMED', Status_B: 'CLEARED', Status_C: 'CONFIRM', Status_d: 'REPORTED' },
  STP_LIGHTGRAY: { Colour: 'lightgray', Status_A: 'TMMSENT' },
  STP_DARKGRAY: { Colour: 'darkgray', Status_A: 'UNKNOWN' },
  STP_UNDEFINED: { Colour: 'undefined', Status_A: 'ACKFAILURE', Status_B: 'NOSTP', Status_C: 'ERROR', Status_D: 'NOTSENT', Status_E: 'TMMSENDPENDING' },

  // these are the STP statuses available in the column filter menu
  STP_BlackLbl: 'TMMSENDFAILURE',
  STP_RedLbl: 'REJECT, CANCELLED, WITHDRAWN, REJECTED',
  STP_YellowLbl: 'DELIVERED, PICKEDUP, PENDING',
  STP_GreenLbl: 'AFFIRMED, CLEARED, CONFIRM, REPORTED',
  STP_LightGrayLbl: 'TMMSENT',
  STP_DarkGrayLbl: 'UNKNOWN',
  STP_Undefined: 'N/A',

  // these are the STP statuses used when calling STP test tool end point
  DELIVERED: ['DELIVERED', 'SUCCESS', 'Completed', 'AFFIRM'],
  CANCELLED: ['CANCELLED', 'REJECTION', 'Deal State: SWDS_Terminated', 'AFFIRM'],
  AFFIRMED: ['AFFIRMED', 'SUCCESS', 'DealState:SWDS_Active, RecipientId: _2, ParticipantId: BARC, Group(s): EUR-LONG-SWAPS, RecipientState: Accepted (by bc_ldn_pdn_mpu_01), Side: Receiver', 'AFFIRM'],
  WITHDRAWN: ['WITHDRAWN', 'SUCCESS', 'Deal State: SWDS_Withdrawn', 'AFFIRM'],
  TMM_SENT: ['TMM:SENT', 'SUCCESS', '21643895', 'AFFIRM'],
  TMM_SENDFAILURE: ['TMM:SENDFAILURE', 'FAILURE', 'Session::SubmitNewBrokeredDeal() - ErrCode=SWERR_UnknownUserOrGroup, Message=The specified userID or groupID [Group: ] was not recognised as a valid user/group identifier in the specified participant [GOLD]', 'AFFIRM'],
  REJECT: ['REJECT', 'FAILURE', 'DealState:SWDS_Withdrawn, RecipientId: _2, ParticipantId: ML, Group(s): LN_EURO SWAPS, RecipientState: Rejected (by James Carlisle Trader), RejectReason: pls rebook, Side: Receiver', 'AFFIRM'],
  PENDING: ['PENDING', 'SUCCESS', 'DealState:SWDS_Active, RecipientId: _2, ParticipantId: TEST2, User(s): Tullet Test Trader SWTest, RecipientState: Not picked up, Side: Receiver', 'AFFIRM'],
  PICKED_UP: ['PICKED-UP', 'SUCCESS', 'DealState:SWDS_Active, RecipientId: _1, ParticipantId: BARC, Group(s): Hadley Parrie Auto, RecipientState: Picked up (by bc_ldn_pdn_mpu_03), Side: Payer', 'AFFIRM'],
  CONFIRM: ['CONFIRM', 'SUCCESS', 'CONFIRM', 'AFFIRM'],
  UNKNOWN: ['Unknown', 'SUCCESS', 'RT-PET-CONFIRM:No Net change, report not sent.', 'AFFIRM'],
  // following not available in DMS Web blotter
  TMM_SENDPENDING: ['TMM:SENDPENDING', 'SUCCESS', '', 'AFFIRM'],
  ERROR: ['ERROR', 'SUCCESS', 'FailureReason: Repository returned error, USI: 1010000280-20131010065020131009100000000399', 'AFFIRM'],
  NOTSENT: ['NOTSENT', 'SUCCESS', 'Cannot send RTNS messages after trade date.', 'AFFIRM'],
  ACKFAILURE: ['ACKFAILURE', 'SUCCESS', "Error saving TMM message to database: Procedure or function 'ReceivedTMMMessage' expects parameter '@IsStrategy', which was not supplied.", 'AFFIRM'],
  NO_STP: ['No STP', 'SUCCESS', 'No STP Gateway Configured', 'AFFIRM'],
  BLOCKED: ['BLOCKED', 'SUCCESS', '', 'AFFIRM'],
});
module.exports = BlotterData;
